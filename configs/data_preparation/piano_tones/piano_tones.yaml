tasks: signalai.tasks.data_preparation.*
uses: "{CONFIGS_DIR}/datasets/piano.yaml"
load_to_ram: true

train:
  to_ram: true
  tracks:
    t0:
      class: signalai.strategies.ToneStrategy
      kwargs:
        superclasses:
        - all_piano
        strategy: start
        tones_count_range: [2, 10]
        start_arange: [0, 262144, 8192]
        tone_length_arange: [4096, 32768, 4096]
        transform:
          base:
            - class: signalai.transformers.ChannelJoiner
              kwargs:
                choose_channels:
                  - [[0,1]]

            - class: signalai.transformers.Reverb
              kwargs:
                transform_chance: 0.2
                room_size: [.0, 1.]
                damping: [.0, 1.]
                wet_level: [.0, 1.]
                dry_level: [.0, 1.]
#                freeze_mode: [.0,.2]

            - class: signalai.transformers.Gain
              kwargs:
                transform_chance: 0.2
                gain_db: [-15., 15.]

            - class: signalai.transformers.Chorus
              kwargs:
                transform_chance: 0.2
                centre_delay_ms: [6.5, 8.5]
          X: []
          Y:
            - class: signalai.transformers.TimeMapScale
              kwargs:
                scale: 1/512

  transform:
    base: []
    X: []
    Y: []

  X: t0.sum_channels()
  Y: t0.stack_series(only_valid=False).time_map.astype('float32')


valid: {}


test:
  to_ram: true
  tracks:
    t0:
      class: signalai.strategies.ToneStrategy
      kwargs:
        superclasses:
        - piano
        strategy: start
        tones_count_range: [2, 20]
        start_arange: [0, 262144, 8192]
        tone_length_arange: [4096, 32768, 4096]

        transform:
          base:
            - class: signalai.transformers.ChannelJoiner
              kwargs:
                choose_channels:
                  - [[0,1]]
          X: []
          Y:
            - class: signalai.transformers.TimeMapScale
              kwargs:
                scale: 1/512

  transform:
    base: []
    X: []
    Y: []

  X: t0.sum_channels()
  Y: t0.stack_series(only_valid=False).time_map.astype('float32')
