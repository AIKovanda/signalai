tasks: signalai.tasks.data_preparation.*
uses: "{CONFIGS_DIR}/datasets/burst_detection.yaml"


generators:
  reverb:
    class: signalai.transformers.Reverb
    kwargs:
      transform_chance: 0.2
      room_size: [.0, 1.]
      damping: [.0, 1.]
      wet_level: [.0, 1.]
      dry_level: [.0, 1.]

  gain:
    class: signalai.transformers.Gain
    kwargs:
      transform_chance: 0.2
      gain_db: [-35., 35.]

  gain_noise:
    class: signalai.transformers.Gain
    kwargs:
      transform_chance: 0.2
      gain_db: [-15., 55.]

#  chorus:
#    class: signalai.transformers.Chorus
#    kwargs:
#      transform_chance: 0.2
#      centre_delay_ms: [6.5, 8.5]

  x_lambda:
    class: signalai.time_series_gen.LambdaTransformer
    kwargs:
      lambda_w: w.data_arr
      apply_to_ts: true

  y_lambda:
    class: signalai.time_series_gen.LambdaTransformer
    kwargs:
      lambda_w: np.array([w.meta['category']])
      apply_to_ts: true

  time_map:
    class: signalai.time_series_gen.LambdaTransformer
    kwargs:
      lambda_w: w.time_map.astype('float32')
      apply_to_ts: true

  sum:
    class: signalai.time_series_gen.TimeSeriesSum

  sum_channels:
    class: signalai.time_series_gen.LambdaTransformer
    kwargs:
      lambda_w: w.sum_channels()
      apply_to_ts: true


data_graph:
  =Z:
    gain:
      reverb:
        burst_train

  =X:
    x_lambda:
      sum:
        - gain_noise:
            reverb:
              hum_and_noise
        - sum_channels: Z

  =Y:
    time_map: Z

  =Z_test:
    gain:
      reverb:
        burst_test

  =X_test:
    x_lambda:
      sum:
        - gain:
            reverb:
              hum_and_noise
        - sum_channels: Z_test

  =Y_test:
    time_map: Z_test


train_gen:
  inputs:
    - X
  outputs:
    - Y

valid_gen:
  inputs:
    - X_test
  outputs:
    - Y_test

test_gen:
  inputs:
    - X_test
  outputs:
    - Y_test
